[toplevel]

show-aliases = !cat ~/.aws/cli/alias

deploy-workshop-resources = cloudformation deploy \
  --template-file ~/environment/aws-cli-workshop/infra/app.yml \
  --stack-name aws-cli-workshop \
  --capabilities CAPABILITY_NAMED_IAM

show-workshop-resources = cloudformation describe-stack-resources \
  --stack-name aws-cli-workshop \
  --query 'sort_by(StackResources[].{"Resource Id":PhysicalResourceId,"AWS Resource Type":ResourceType},&"AWS Resource Type")' \
  --output table

show-workshop-builds =
  !f() {
    build_ids=$(aws codebuild list-builds-for-project \
      --project-name aws-cli-workshop --query ids --output text)
    if [ -z "${build_ids}" ]; then
      echo "Found no builds for workshop" && exit 0
    fi
    aws codebuild batch-get-builds \
      --ids $build_ids \
      --query 'builds[].{"Start time":startTime,"Build id":id,"Status":buildStatus}' \
      --output table
  }; f

show-workshop-images =
   !f() {
     summary=$(aws ecr describe-images \
       --repository-name aws-cli/workshop \
       --filter tagStatus=TAGGED \
       --query 'sort(imageDetails[].imageTags[])'
     )
     if [ "${summary}" = "[]" ]; then
      echo "Found no Docker images in our workshop repository" && exit 0
     fi
     echo "$summary"
   }; f

delete-events-to-logs-rule =
   !f() {
     event_rule_name="$1"
     target_ids=$(aws events list-targets-by-rule --rule "$event_rule_name" --query Targets[].Id)
     aws events remove-targets --rule "$event_rule_name" --ids="$target_ids" > /dev/null
     aws events delete-rule --name "$event_rule_name" > /dev/null
     aws logs delete-resource-policy --policy-name "WriteEventLogs" > /dev/null
   }; f

